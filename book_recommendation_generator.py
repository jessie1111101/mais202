# -*- coding: utf-8 -*-
"""Book Recommendation Generator

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DqN1c9uNrzPeei7jo-BHV2v96vJM7n5t

"""

import numpy as np
import pandas as pd
import sklearn.feature_extraction.text
import sklearn.metrics.pairwise

TfidVectorizer = sklearn.feature_extraction.text.TfidfVectorizer
linear_kernel = sklearn.metrics.pairwise.linear_kernel

book_csv_url = 'https://raw.githubusercontent.com/zygmuntz/goodbooks-10k/master/books.csv'
books = pd.read_csv(book_csv_url)

ratings_url = 'https://raw.githubusercontent.com/zygmuntz/goodbooks-10k/master/ratings.csv'
ratings = pd.read_csv(ratings_url)

book_tags_url = 'https://github.com/zygmuntz/goodbooks-10k/blob/master/book_tags.csv?raw=true'
book_tags = pd.read_csv(book_tags_url)

tags_url = 'https://raw.githubusercontent.com/zygmuntz/goodbooks-10k/master/tags.csv'
tags = pd.read_csv(tags_url)

tags_join_DF = pd.merge(book_tags, tags, left_on='tag_id', right_on='tag_id', how='inner')

to_read_url='https://raw.githubusercontent.com/zygmuntz/goodbooks-10k/master/to_read.csv'
to_read = pd.read_csv(to_read_url)

'''
books.head()
ratings.head()
book_tags.head()
tags.tail()
tags_join_DF.head()
to_read.head()
'''

"""TfidVectorizer transforms text to feature vectors that is used as input to estimate

cosine simlarity calculates numeric value denoting similarity between two books
"""

tf = TfidVectorizer(analyzer = 'word', ngram_range=(1,2), min_df=0, stop_words = 'english')
tfidf_matrix = tf.fit_transform(books['authors'])
cosine_sim=linear_kernel(tfidf_matrix, tfidf_matrix)

cosine_sim

#build 1d dimensional array w book titles
titles = books['title']
indices = pd.Series(books.index, index=books['title'])

#function that gets book recs based on cosine similarity score of book authors
def authors_recommendations(title):
  idx = indices[title]
  sim_scores = list(enumerate(cosine_sim[idx]))
  sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
  sim_scores = sim_scores[1:21]
  book_indices = [i[0] for i in sim_scores]
  return titles.iloc[book_indices]

authors_recommendations('The Hobbit').head(20)

"""recommend books using tags provided to books"""

books_with_tags = pd.merge(books, tags_join_DF, left_on='book_id', right_on='goodreads_book_id', how='inner')
# books_with_tags[(books_with_tags.goodreads_book_id==18710190)]['tag_name']

tf1 = TfidVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')
tfidf_matrix1 = tf1.fit_transform(books_with_tags['tag_name'].head(10000))
cosine_sim1 = linear_kernel(tfidf_matrix1, tfidf_matrix1)

cosine_sim1

#build 1d array w book titles
titles1 = books['title']
indices1 = pd.Series(books.index, index=books['title'])

# Function that get book recommendations based on the cosine similarity score of books tags
def tags_recommendations(title):
    idx = indices1[title]
    sim_scores = list(enumerate(cosine_sim1[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:21]
    book_indices = [i[0] for i in sim_scores]
    return titles.iloc[book_indices]

tags_recommendations('The Hobbit').head(20)

"""Recommendation of books using the authors and tags attributes for better results. Creating corpus of features and calculating the TF-IDF on the corpus of attributes for gettings better recommendations."""

temp_df = books_with_tags.groupby('book_id')['tag_name'].apply(' '.join).reset_index()
temp_df.head()

books = pd.merge(books, temp_df, left_on='book_id', right_on='book_id', how='inner')
books.head()

books['corpus'] = (pd.Series(books[['authors', 'tag_name']].fillna('').values.tolist()).str.join(' '))
tf_corpus = TfidVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')
tfidf_matrix_corpus = tf_corpus.fit_transform(books['corpus'])
cosine_sim_corpus = linear_kernel(tfidf_matrix_corpus, tfidf_matrix_corpus)

# Build a 1-dimensional array with book titles
titles = books['title']
indices = pd.Series(books.index, index=books['title'])

# Function that get book recommendations based on the cosine similarity score of books tags
def corpus_recommendations(title):
    idx = indices1[title]
    sim_scores = list(enumerate(cosine_sim_corpus[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:21]
    book_indices = [i[0] for i in sim_scores]
    return titles.iloc[book_indices]

#corpus_recommendations("The Hobbit")
#corpus_recommendations("Twilight (Twilight, #1)")
#corpus_recommendations("Romeo and Juliet")
#corpus_recommendations("The Perks of Being a Wallflower")
#corpus_recommendations("The Glass Castle")
corpus_recommendations("Gone with the Wind")

